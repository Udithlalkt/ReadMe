<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <version>5.0.0</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <scope>test</scope>
</dependency>


import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import javax.jms.*;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@ExtendWith(MockitoExtension.class)
public class JmsProducerTest {

    @Mock
    private QueueConnectionFactory factory;

    @Mock
    private QueueConnection connection;

    @Mock
    private QueueSession session;

    @Mock
    private MessageProducer producer;

    @Mock
    private Destination destination;

    @InjectMocks
    private JmsProducer jmsProducer; // Replace with your actual class name

    @Test
    public void testSendMessage() throws Exception {
        // Arrange
        String message = "Test Message";
        String correlationID = "12345";

        when(factory.createQueueConnection()).thenReturn(connection);
        when(connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)).thenReturn(session);
        when(session.createQueue(anyString())).thenReturn((Queue) destination);
        when(session.createProducer(destination)).thenReturn(producer);

        BytesMessage bytesMessage = mock(BytesMessage.class);
        when(session.createBytesMessage()).thenReturn(bytesMessage);

        // Act
        jmsProducer.sendMessage(message, correlationID);

        // Assert
        verify(factory).createQueueConnection();
        verify(connection).createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
        verify(session).createProducer(destination);
        verify(producer).send(bytesMessage);

        verify(bytesMessage).setJMSCorrelationID(correlationID);
        verify(bytesMessage).writeBytes(message.getBytes());
    }
}
