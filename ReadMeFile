import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.io.ClassPathResource;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import java.io.InputStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ComponentTest {

    @Mock
    private JmsIntegrator jmsIntegrator;
    
    @Mock
    private MfRequestMapper mfRequestMapper;
    
    @Mock
    private ResponseMapper responseMapper;
    
    @InjectMocks
    private ComponentTestClass componentUnderTest;

    private final ObjectMapper xmlMapper = new ObjectMapper();

    @BeforeEach
    void setup() {
        xmlMapper.registerModule(new JaxbAnnotationModule());
    }

    @Test
    void processRequest_ValidRequest_SuccessFlow() throws Exception {
        // Arrange
        BatchRenewalRe request = loadXmlRequest("/requests/valid_request.xml");
        String mockCcbPayload = "CCB_FORMAT_STRING";
        BatchRenewalRe mockResponse = new BatchRenewalRe();

        when(mfRequestMapper.createMFRequestPayLoad(request)).thenReturn(mockCcbPayload);
        when(responseMapper.mapresponse(request)).thenReturn(mockResponse);

        // Act
        BatchRenewalRe result = componentUnderTest.processRequest(request);

        // Assert
        verify(jmsIntegrator).sendMessage(mockCcbPayload, request.getClientInfo().getClientBUID());
        assertEquals(mockResponse, result);
    }

    @Test
    void processRequest_EmptyRenewalDetails_ErrorFlow() throws Exception {
        // Arrange
        BatchRenewalRe request = loadXmlRequest("/requests/empty_details_request.xml");
        CustomServiceException expectedException = new CustomServiceException(BUSINESS_VALIDATION_CODE, BLANK_RENEWAL_DETAILS);
        String mockErrorPayload = "ERROR_PAYLOAD";
        BatchRenewalRe mockErrorResponse = new BatchRenewalRe();

        when(mfRequestMapper.createMFErrorRequestPayLoad(expectedException, request)).thenReturn(mockErrorPayload);
        when(responseMapper.createErrorResponse(expectedException, request)).thenReturn(mockErrorResponse);

        // Act & Assert
        assertThrows(CustomServiceException.class, () -> {
            componentUnderTest.processRequest(request);
        });

        verify(jmsIntegrator).sendMessage(mockErrorPayload, request.getClientInfo().getClientBUID());
    }

    @Test
    void processRequest_JmsException_ServiceFaultFlow() throws Exception {
        // Arrange
        BatchRenewalRe request = loadXmlRequest("/requests/valid_request.xml");
        when(mfRequestMapper.createMFRequestPayLoad(request)).thenThrow(new IOException("JMS Connection Failed"));

        // Act & Assert
        assertThrows(ServiceFaultException.class, () -> {
            componentUnderTest.processRequest(request);
        });
    }

    private BatchRenewalRe loadXmlRequest(String filePath) throws Exception {
        JAXBContext context = JAXBContext.newInstance(BatchRenewalRe.class);
        Unmarshaller unmarshaller = context.createUnmarshaller();
        
        try (InputStream is = new ClassPathResource(filePath).getInputStream()) {
            return (BatchRenewalRe) unmarshaller.unmarshal(is);
        }
    }
}