package com.example.mq.listener;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.jms.annotation.EnableJms;
import org.springframework.jms.core.JmsTemplate;
import jakarta.jms.ConnectionFactory;

@SpringBootApplication
@EnableJms
public class MqListenerApplication {

    public static void main(String[] args) {
        SpringApplication.run(MqListenerApplication.class, args);
    }

    @Bean
    public JmsTemplate jmsTemplate(ConnectionFactory connectionFactory) {
        return new JmsTemplate(connectionFactory);
    }
}




package com.example.mq.listener;

import com.ibm.mq.jms.MQConnectionFactory;
import com.ibm.msg.client.wmq.WMQConstants;
import jakarta.jms.ConnectionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter;

@Configuration
public class MqConfig {

    @Autowired
    private MqProperties mqProperties;

    @Bean
    public ConnectionFactory mqConnectionFactory() throws Exception {
        MQConnectionFactory mqConnectionFactory = new MQConnectionFactory();
        mqConnectionFactory.setHostName(mqProperties.getConnName().split("\\(")[0]);
        mqConnectionFactory.setPort(Integer.parseInt(mqProperties.getConnName().replaceAll("\\D+", "")));
        mqConnectionFactory.setQueueManager(mqProperties.getQueueManager());
        mqConnectionFactory.setChannel(mqProperties.getChannel());
        mqConnectionFactory.setTransportType(WMQConstants.WMQ_CM_CLIENT);

        UserCredentialsConnectionFactoryAdapter adapter = new UserCredentialsConnectionFactoryAdapter();
        adapter.setTargetConnectionFactory(mqConnectionFactory);
        adapter.setUsername(mqProperties.getUser());
        adapter.setPassword(mqProperties.getPassword());
        return adapter;
    }
}






package com.example.mq.listener;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@Component
@ConfigurationProperties(prefix = "ibm.mq")
public class MqProperties {

    private String queueManager = "QM1";
    private String channel = "DEV.APP.SVRCONN";
    private String connName = "localhost(1414)";
    private String user = "admin";
    private String password = "passw0rd";
    private String queue = "DEV.QUEUE.1";

    // Getters and setters
    public String getQueueManager() {
        return queueManager;
    }

    public void setQueueManager(String queueManager) {
        this.queueManager = queueManager;
    }

    public String getChannel() {
        return channel;
    }

    public void setChannel(String channel) {
        this.channel = channel;
    }

    public String getConnName() {
        return connName;
    }

    public void setConnName(String connName) {
        this.connName = connName;
    }

    public String getUser() {
        return user;
    }

    public void setUser(String user) {
        this.user = user;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getQueue() {
        return queue;
    }

    public void setQueue(String queue) {
        this.queue = queue;
    }
}




package com.example.mq.listener;

import jakarta.jms.Message;
import jakarta.jms.TextMessage;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.stereotype.Service;

@Service
public class MqListenerService {

    @JmsListener(destination = "${ibm.mq.queue}")
    public void receiveMessage(Message message) {
        try {
            if (message instanceof TextMessage) {
                String text = ((TextMessage) message).getText();
                System.out.println("Received message: " + text);

                // Simulate processing the message
                System.out.println("Acknowledgement sent for message: " + text);
            } else {
                System.out.println("Received non-text message");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}







# IBM MQ Configuration
ibm.mq.queue-manager=QM1
ibm.mq.channel=DEV.APP.SVRCONN
ibm.mq.conn-name=localhost(1414)
ibm.mq.user=admin
ibm.mq.password=passw0rd
ibm.mq.queue=DEV.QUEUE.1
